{"ast":null,"code":"/*import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// Obtenir toutes les tâches\r\nexport const fetchTasks = async () => {\r\n  const response = await axios.get(`${API_URL}/tasks`);\r\n  return response.data;\r\n};\r\n\r\n// Ajouter une nouvelle tâche\r\nexport const addTask = async (task) => {\r\n  const response = await axios.post(`${API_URL}/tasks`, task);\r\n  return response.data;\r\n};\r\n*/\n\nimport axios from \"axios\";\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:5000/api\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport const fetchTasks = async token => {\n  try {\n    const response = await apiClient.get(\"/tasks\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Erreur lors de la récupération des tâches\");\n  }\n};\n\n// Similaire pour createTask, updateTask, deleteTask","map":{"version":3,"names":["axios","apiClient","create","baseURL","process","env","REACT_APP_API_URL","headers","fetchTasks","token","response","get","Authorization","data","error","_error$response","_error$response$data","Error","message"],"sources":["C:/Users/Mohamed Toumi/Documents/Task-Management-Application/Task-Management-Application-/frontend/src/api/taskApi.js"],"sourcesContent":["\r\n\r\n/*import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// Obtenir toutes les tâches\r\nexport const fetchTasks = async () => {\r\n  const response = await axios.get(`${API_URL}/tasks`);\r\n  return response.data;\r\n};\r\n\r\n// Ajouter une nouvelle tâche\r\nexport const addTask = async (task) => {\r\n  const response = await axios.post(`${API_URL}/tasks`, task);\r\n  return response.data;\r\n};\r\n*/\r\n\r\nimport axios from \"axios\";\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:5000/api\",\r\n  headers: { \"Content-Type\": \"application/json\" },\r\n});\r\n\r\nexport const fetchTasks = async (token) => {\r\n  try {\r\n    const response = await apiClient.get(\"/tasks\", {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || \"Erreur lors de la récupération des tâches\");\r\n  }\r\n};\r\n\r\n// Similaire pour createTask, updateTask, deleteTask\r\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EACrEC,OAAO,EAAE;IAAE,cAAc,EAAE;EAAmB;AAChD,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAG,MAAOC,KAAK,IAAK;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMT,SAAS,CAACU,GAAG,CAAC,QAAQ,EAAE;MAC7CJ,OAAO,EAAE;QAAEK,aAAa,EAAE,UAAUH,KAAK;MAAG;IAC9C,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACd,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACJ,QAAQ,cAAAK,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,2CAA2C,CAAC;EAC/F;AACF,CAAC;;AAED","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}