{"ast":null,"code":"/*import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// Obtenir toutes les tâches\r\nexport const fetchTasks = async () => {\r\n  const response = await axios.get(`${API_URL}/tasks`);\r\n  return response.data;\r\n};\r\n\r\n// Ajouter une nouvelle tâche\r\nexport const addTask = async (task) => {\r\n  const response = await axios.post(`${API_URL}/tasks`, task);\r\n  return response.data;\r\n};\r\n*/\n\nimport API from '.:'; // Assure-toi que 'API' est bien configuré pour faire des requêtes\n\n// Fonction pour récupérer toutes les tâches\nexport const fetchTasks = async () => {\n  try {\n    const response = await API.get('/tasks');\n    return response.data; // Retourne les données récupérées\n  } catch (error) {\n    throw new Error('Erreur lors de la récupération des tâches');\n  }\n};\n\n// Fonction pour créer une nouvelle tâche\nexport const createTask = async taskData => {\n  try {\n    const response = await API.post('/tasks', taskData); // Envoi des données pour créer la tâche\n    return response.data; // Retourne la tâche créée\n  } catch (error) {\n    throw new Error('Erreur lors de la création de la tâche');\n  }\n};\n\n// Fonction pour mettre à jour une tâche existante\nexport const updateTask = async (taskId, updatedData) => {\n  try {\n    const response = await API.put(`/tasks/${taskId}`, updatedData); // Mise à jour de la tâche\n    return response.data; // Retourne la tâche mise à jour\n  } catch (error) {\n    throw new Error('Erreur lors de la mise à jour de la tâche');\n  }\n};\n\n// Fonction pour supprimer une tâche\nexport const deleteTask = async taskId => {\n  try {\n    await API.delete(`/tasks/${taskId}`); // Suppression de la tâche\n  } catch (error) {\n    throw new Error('Erreur lors de la suppression de la tâche');\n  }\n};","map":{"version":3,"names":["API","fetchTasks","response","get","data","error","Error","createTask","taskData","post","updateTask","taskId","updatedData","put","deleteTask","delete"],"sources":["C:/Users/Mohamed Toumi/Documents/Task-Management-Application/Task-Management-Application-/frontend/src/api/taskApi.js"],"sourcesContent":["\r\n\r\n/*import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// Obtenir toutes les tâches\r\nexport const fetchTasks = async () => {\r\n  const response = await axios.get(`${API_URL}/tasks`);\r\n  return response.data;\r\n};\r\n\r\n// Ajouter une nouvelle tâche\r\nexport const addTask = async (task) => {\r\n  const response = await axios.post(`${API_URL}/tasks`, task);\r\n  return response.data;\r\n};\r\n*/\r\n\r\nimport API from '.:';  // Assure-toi que 'API' est bien configuré pour faire des requêtes\r\n\r\n// Fonction pour récupérer toutes les tâches\r\nexport const fetchTasks = async () => {\r\n  try {\r\n    const response = await API.get('/tasks');\r\n    return response.data;  // Retourne les données récupérées\r\n  } catch (error) {\r\n    throw new Error('Erreur lors de la récupération des tâches');\r\n  }\r\n};\r\n\r\n// Fonction pour créer une nouvelle tâche\r\nexport const createTask = async (taskData) => {\r\n  try {\r\n    const response = await API.post('/tasks', taskData);  // Envoi des données pour créer la tâche\r\n    return response.data;  // Retourne la tâche créée\r\n  } catch (error) {\r\n    throw new Error('Erreur lors de la création de la tâche');\r\n  }\r\n};\r\n\r\n// Fonction pour mettre à jour une tâche existante\r\nexport const updateTask = async (taskId, updatedData) => {\r\n  try {\r\n    const response = await API.put(`/tasks/${taskId}`, updatedData);  // Mise à jour de la tâche\r\n    return response.data;  // Retourne la tâche mise à jour\r\n  } catch (error) {\r\n    throw new Error('Erreur lors de la mise à jour de la tâche');\r\n  }\r\n};\r\n\r\n// Fonction pour supprimer une tâche\r\nexport const deleteTask = async (taskId) => {\r\n  try {\r\n    await API.delete(`/tasks/${taskId}`);  // Suppression de la tâche\r\n  } catch (error) {\r\n    throw new Error('Erreur lors de la suppression de la tâche');\r\n  }\r\n};\r\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,GAAG,MAAM,IAAI,CAAC,CAAE;;AAEvB;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAE;EACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EAC9D;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMF,GAAG,CAACS,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC,CAAC,CAAE;IACtD,OAAON,QAAQ,CAACE,IAAI,CAAC,CAAE;EACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,wCAAwC,CAAC;EAC3D;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;EACvD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMF,GAAG,CAACa,GAAG,CAAC,UAAUF,MAAM,EAAE,EAAEC,WAAW,CAAC,CAAC,CAAE;IAClE,OAAOV,QAAQ,CAACE,IAAI,CAAC,CAAE;EACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EAC9D;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,UAAU,GAAG,MAAOH,MAAM,IAAK;EAC1C,IAAI;IACF,MAAMX,GAAG,CAACe,MAAM,CAAC,UAAUJ,MAAM,EAAE,CAAC,CAAC,CAAE;EACzC,CAAC,CAAC,OAAON,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EAC9D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}