{"ast":null,"code":"/* import axios from \"axios\";\r\n\r\nconst BASE_URL = process.env.REACT_APP_AUTH_URL || \"http://localhost:5000/api/auth\";\r\n\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const response = await axios.post(`${BASE_URL}/login`, credentials);\r\n    return response.data.token;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || \"Une erreur est survenue\");\r\n  }\r\n};\r\n*/\n\nimport axios from \"axios\";\n\n// Base URL de l'API (modifiée selon l'environnement)\nconst BASE_URL = \"http://localhost:5000/api/auth\";\n\n/**\r\n * Fonction pour connecter un utilisateur\r\n * @param {Object} credentials - Les informations d'identification de l'utilisateur (email, mot de passe)\r\n * @returns {Promise<string>} - Renvoie le token JWT reçu du backend\r\n */\nexport const loginUser = async credentials => {\n  const response = await axios.post(`${BASE_URL}/login`, credentials);\n  return response.data.token; // Extraction du token depuis la réponse du backend\n};\n\n/**\r\n * Fonction pour inscrire un utilisateur\r\n * @param {Object} credentials - Les informations nécessaires pour l'inscription (email, mot de passe)\r\n * @returns {Promise<Object>} - Renvoie la réponse complète du backend\r\n */\nexport const registerUser = async credentials => {\n  const response = await axios.post(`${BASE_URL}/register`, credentials);\n  return response.data; // Extraction des données de la réponse du backend\n};","map":{"version":3,"names":["axios","BASE_URL","loginUser","credentials","response","post","data","token","registerUser"],"sources":["C:/Users/Mohamed Toumi/Documents/Task-Management-Application/Task-Management-Application-/frontend/src/api/authApi.js"],"sourcesContent":["\r\n\r\n/* import axios from \"axios\";\r\n\r\nconst BASE_URL = process.env.REACT_APP_AUTH_URL || \"http://localhost:5000/api/auth\";\r\n\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const response = await axios.post(`${BASE_URL}/login`, credentials);\r\n    return response.data.token;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || \"Une erreur est survenue\");\r\n  }\r\n};\r\n*/\r\n\r\nimport axios from \"axios\";\r\n\r\n// Base URL de l'API (modifiée selon l'environnement)\r\nconst BASE_URL = \"http://localhost:5000/api/auth\";\r\n\r\n/**\r\n * Fonction pour connecter un utilisateur\r\n * @param {Object} credentials - Les informations d'identification de l'utilisateur (email, mot de passe)\r\n * @returns {Promise<string>} - Renvoie le token JWT reçu du backend\r\n */\r\nexport const loginUser = async (credentials) => {\r\n  const response = await axios.post(`${BASE_URL}/login`, credentials);\r\n  return response.data.token; // Extraction du token depuis la réponse du backend\r\n};\r\n\r\n/**\r\n * Fonction pour inscrire un utilisateur\r\n * @param {Object} credentials - Les informations nécessaires pour l'inscription (email, mot de passe)\r\n * @returns {Promise<Object>} - Renvoie la réponse complète du backend\r\n */\r\nexport const registerUser = async (credentials) => {\r\n  const response = await axios.post(`${BASE_URL}/register`, credentials);\r\n  return response.data; // Extraction des données de la réponse du backend\r\n};\r\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAG,gCAAgC;;AAEjD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,QAAQ,QAAQ,EAAEE,WAAW,CAAC;EACnE,OAAOC,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC,CAAC;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOL,WAAW,IAAK;EACjD,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,QAAQ,WAAW,EAAEE,WAAW,CAAC;EACtE,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}